/**
 * Created by yeobster on 15. 3. 12..
 */

var events = require('events'),
    emitter = new events.EventEmitter(),
    moment = require('moment'),
    prettyjson = require('prettyjson'),
    fs = require('fs'),
    path = require('path'),
    _ = require('lodash');

var colorOption = {
    keysColor: 'green',
    numberColor: 'blue',
    stringColor: 'yellow'
};

function isEmptyObject(obj) {
    if (typeof obj === 'object') {
        return (obj) ? !Object.keys(obj).length : true;
    } else {
        return true;
    }
}

function changeFileObjectToLog(obj) {
    var result = {};
    for (var index in obj) {
        var v = obj[index];
        if (typeof v == "object" && _.has(v, 'hapi.headers.content-type')) {

            result[index] = {
                'fileName': _.get(v, 'hapi.filename'),
                'fileSize': _.get(v, '_data.length'),
                'content-type': _.get(v, 'hapi.headers.content-type')
            };
        } else if (_.isArray[v]) {
            if (v.length > 0) {
                if (_.has(v[0], 'hapi.headers.content-type')) {
                    result[index] = [];
                    for (var i in v) {
                        result[index].push({
                            'fileName': _.get(v[i], 'hapi.filename'),
                            'fileSize': _.get(v[i], '_data.length'),
                            'content-type': _.get(v[i], 'hapi.headers.content-type')
                        });
                    }
                }
            }
        } else {
            result[index] = v;
        }
    }
    return result;
}

function writeToFile(options, log) {
    if (options.logPath) {
        var now = moment().format('YYYYMMDD');
        var logFile = path.resolve(options.logPath, 'request_' + now + '.log');
        fs.appendFile(logFile, JSON.stringify(log) + '\n', function (err) {
            if (err) throw err;
        });
    }
}

exports.register = function (server, options, next) {
    var echo = function (request) {
        emitter.emit('echo-request', request);
    };
    server.expose('echo', echo);

    emitter.on('echo-request', function (request) {
        var requestTime = moment().format('YYYY-MM-DD HH:mm:SSS');
        var method = request.method;
        var path = request.path;
        var url = request.info.remoteAddress;
        console.log(requestTime + ', [request], ' + url + ', \x1b[0m\x1b[32m' + method + ' \x1b[0m' + path);

        var log = {
            request: {
                time: requestTime,
                method: method,
                url: url,
                path: path
            }
        };

        if (options.params) {
            if (!isEmptyObject(request.query)) {
                console.log('\x1b[1m\x1b[34m [query]\x1b[0m\n' + prettyjson.render(request.query, colorOption, 4));
                _.extend(log, { query: request.query });
            }
            if (!isEmptyObject(request.params)) {
                console.log('\x1b[1m\x1b[34m [params]\x1b[0m\n' + prettyjson.render(request.params, colorOption, 4));
                _.extend(log, { params: request.params });
            }
            if (!isEmptyObject(request.payload)) {
                var result = changeFileObjectToLog(request.payload);
                console.log('\x1b[1m\x1b[34m [payload]\x1b[0m\n' + prettyjson.render(result, colorOption, 4));
                _.extend(log, { payload: result });
            }
        }
        if (options.auth) {
            if (request.auth && request.auth.credentials) {
                console.log('\x1b[1m\x1b[34m [auth]\x1b[0m');
                console.log(prettyjson.render(request.auth.credentials, colorOption, 4));
                _.extend(log, { auth: request.auth.credentials });
            }
        }
        writeToFile(options, log);

    });
    return next();
};

exports.register.attributes = {
    pkg: require('../package.json')
};