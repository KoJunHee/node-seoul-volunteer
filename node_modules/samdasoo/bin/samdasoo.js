#! /usr/bin/env node

'use strict';

var fs = require('fs'),
    path = require('path'),
    _ = require('lodash');
var prompt = require('prompt');
var exec = require('child_process').exec;

var SERVER_PATH = path.resolve('server');
var ROUTES_PATH = path.resolve(SERVER_PATH, 'routes');
var MODELS_PATH = path.resolve(SERVER_PATH, 'models');
var CONTROLLERS_PATH = path.resolve(SERVER_PATH, 'controllers');

var ROUTE_TEMPLATE = fs.readFileSync(path.resolve(__dirname, '../template/route.template'), 'utf8');
var MODEL_TEMPLATE = fs.readFileSync(path.resolve(__dirname, '../template/model.template'), 'utf8');
var CONTROLLER_GLOBAL_TEMPLATE = fs.readFileSync(path.resolve(__dirname, '../template/controller_global.template'), 'utf8');
var CONTROLLER_TEMPLATE = fs.readFileSync(path.resolve(__dirname, '../template/controller.template'), 'utf8');

var userArgs = process.argv.slice(2);
if (userArgs[0] === '-a' || userArgs[0] === 'add') {
    // 추가
    console.log(SERVER_PATH);
    if (!fs.existsSync(SERVER_PATH)) {
        console.log('\x1b[31m# 프로젝트의 root 디렉토리 에서 실행 하시오.\x1b[0m\n');
    } else if (!fs.existsSync(ROUTES_PATH)) {
        console.log('\x1b[31m# routes 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else if (!fs.existsSync(MODELS_PATH)) {
        console.log('\x1b[31m# model 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else if (!fs.existsSync(CONTROLLERS_PATH)) {
        console.log('\x1b[31m# controller 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else {
        if (userArgs[1]) {
            prompt.start();
            var dbs = ['exit', 'disk', 'memory', 'mongo', 'mysql', 'postgresql', 'redis', 'sqlserver'];
            var description = '\n[Support Database]';
            for (var index in dbs) {
                description += '\n' + index + '. ' + dbs[index];
            }
            description += '\n Select Database (1-' + dbs.length + ')';

            prompt.get([{
                name: 'database',
                type: 'number',
                description: description.yellow,
                required: true,
                minimum: 0,
                maximum: dbs.length
            }], function (err, result) {
                if (err) {
                    console.log('\x1b[31m# Select Failed \x1b[0m\n');
                }else {
                    if (parseInt(result.database) === 0) {
                        console.log('exit');
                    }else {
                        var selectDB = dbs[result.database];
                        console.log('\x1b[32m# Select ' + selectDB + '\x1b[0m\n');

                        var entity = userArgs[1];
                        var capEntity = _.capitalize(userArgs[1]);

                        var model = _.template(MODEL_TEMPLATE)({ 'entity': entity, 'database': selectDB });
                        var route = _.template(ROUTE_TEMPLATE)({ 'entity': entity });
                        var controller = _.template(CONTROLLER_GLOBAL_TEMPLATE)({
                            'entity': entity,
                            'cap_entity': capEntity
                        });

                        //console.log(model);
                        //console.log(route);
                        //console.log(controller);
                        //
                        var modelFilePath = path.resolve(MODELS_PATH, entity + '.js');
                        var routeFilePath = path.resolve(ROUTES_PATH, entity + '.js');
                        var controllerFilePath = path.resolve(CONTROLLERS_PATH, entity + '.js');

                        if (fs.existsSync(modelFilePath)) {
                            console.log('\x1b[31m# Duplicate Model \x1b[0m\n');
                        } else {
                            fs.writeFile(modelFilePath, model, 'utf8', function (err) {
                                if (err) {
                                    console.log('\x1b[31m# Model 파일 작성 오류 \x1b[0m\n');
                                }else {
                                    // echo
                                    console.log('\x1b[32m>> create ' + modelFilePath + '\x1b[0m\n');
                                    fs.writeFile(routeFilePath, route, 'utf8', function (err) {
                                        if (err) {
                                            console.log('\x1b[31m# route 파일 작성 오류 \x1b[0m\n');
                                        } else {
                                            // echo
                                            console.log('\x1b[32m>> create ' + routeFilePath + '\x1b[0m\n');
                                            fs.writeFile(controllerFilePath, controller, 'utf8', function (err) {
                                                if (err) {
                                                    console.log('\x1b[31m# controller 파일 작성 오류 \x1b[0m\n');
                                                } else {
                                                    // echo
                                                    console.log('\x1b[32m>> create ' + controllerFilePath + '\x1b[0m\n');
                                                    console.log('\x1b[32m## node restart ##\x1b[0m\n');
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                }
            });
        } else {
            console.log('\x1b[31m# 모델명을 입력하세요.\x1b[0m\n');
        }
    }
} else if (userArgs[0] === '-aa') {
    // 추가
    console.log(SERVER_PATH);
    if (!fs.existsSync(SERVER_PATH)) {
        console.log('\x1b[31m# 프로젝트의 root 디렉토리 에서 실행 하시오.\x1b[0m\n');
    } else if (!fs.existsSync(ROUTES_PATH)) {
        console.log('\x1b[31m# routes 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else if (!fs.existsSync(MODELS_PATH)) {
        console.log('\x1b[31m# model 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else if (!fs.existsSync(CONTROLLERS_PATH)) {
        console.log('\x1b[31m# controller 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else {

        if (userArgs[1]) {

            prompt.start();
            var dbs = ['exit', 'disk', 'memory', 'mongo', 'mysql', 'postgresql', 'redis', 'sqlserver'];
            var description = '\n[Support Database]';
            for (var index in dbs) {
                description += '\n' + index + '. ' + dbs[index];
            }
            description += '\n Select Database (1-' + dbs.length + ')';

            prompt.get([{
                name: 'database',
                type: 'number',
                description: description.yellow,
                required: true,
                minimum: 0,
                maximum: dbs.length
            }], function (err, result) {
                if (err) {
                    console.log('\x1b[31m# Select Failed \x1b[0m\n');
                }else {
                    if (parseInt(result.database) === 0) {
                        console.log('exit');
                    }else {
                        var selectDB = dbs[result.database];
                        console.log('\x1b[32m# Select ' + selectDB + '\x1b[0m\n');

                        var entity = userArgs[1];
                        var capEntity = _.capitalize(userArgs[1]);

                        var model = _.template(MODEL_TEMPLATE)({ 'entity': entity, 'database': selectDB });
                        var route = _.template(ROUTE_TEMPLATE)({ 'entity': entity });
                        var controller = _.template(CONTROLLER_TEMPLATE)({ 'entity': entity, 'cap_entity': capEntity });

                        //console.log(model);
                        //console.log(route);
                        //console.log(controller);
                        //
                        var modelFilePath = path.resolve(MODELS_PATH, entity + '.js');
                        var routeFilePath = path.resolve(ROUTES_PATH, entity + '.js');
                        var controllerFilePath = path.resolve(CONTROLLERS_PATH, entity + '.js');

                        if (fs.existsSync(modelFilePath)) {
                            console.log('\x1b[31m# Duplicate Model \x1b[0m\n');
                        } else {
                            fs.writeFile(modelFilePath, model, 'utf8', function (err) {
                                if (err) {
                                    console.log('\x1b[31m# Model 파일 작성 오류 \x1b[0m\n');
                                }else {
                                    // echo
                                    console.log('\x1b[32m>> create ' + modelFilePath + '\x1b[0m\n');
                                    fs.writeFile(routeFilePath, route, 'utf8', function (err) {
                                        if (err) {
                                            console.log('\x1b[31m# route 파일 작성 오류 \x1b[0m\n');
                                        }else {
                                            // echo
                                            console.log('\x1b[32m>> create ' + routeFilePath + '\x1b[0m\n');
                                            fs.writeFile(controllerFilePath, controller, 'utf8', function (err) {
                                                if (err) {
                                                    console.log('\x1b[31m# controller 파일 작성 오류 \x1b[0m\n');
                                                }else {
                                                    // echo
                                                    console.log('\x1b[32m>> create ' + controllerFilePath + '\x1b[0m\n');
                                                    console.log('\x1b[32m## node restart ##\x1b[0m\n');
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                }
            });
        } else {
            console.log('\x1b[31m# 모델명을 입력하세요.\x1b[0m\n');
        }
    }
} else if (userArgs[0] === 'rm' || userArgs[0] === '-r') {
    // 삭제
    if (userArgs[1]) {

        prompt.start();

        prompt.get([{
            name: 'delete',
            type: 'string',
            description: '삭제 하면 복구가 불가능 합니다. y/N'.yellow,
            required: true,
            default: 'N',
            enum: ['y', 'Y', 'n', 'N']
        }], function (err, result) {
            if (err) {
                return console.log('\x1b[31m# 오류 \x1b[0m\n');
            }
            if (result.delete === 'y' || result.delete === 'Y') {
                var entity = userArgs[1];
                var modelFilePath = path.resolve(MODELS_PATH, entity + '.js');
                var routeFilePath = path.resolve(ROUTES_PATH, entity + '.js');
                var controllerFilePath = path.resolve(CONTROLLERS_PATH, entity + '.js');

                if (fs.existsSync(modelFilePath)) {
                    fs.unlinkSync(modelFilePath);
                    console.log('\x1b[32m>> remove ' + modelFilePath + '\x1b[0m');
                }
                if (fs.existsSync(routeFilePath)) {
                    fs.unlinkSync(routeFilePath);
                    console.log('\x1b[32m>> remove ' + modelFilePath + '\x1b[0m');
                }
                if (fs.existsSync(controllerFilePath)) {
                    fs.unlinkSync(controllerFilePath);
                    console.log('\x1b[32m>> remove ' + modelFilePath + '\x1b[0m');
                }
            }
        });
    } else {
        console.log('\x1b[31m# 모델명을 입력하세요.\x1b[0m\n');
    }
} else if (userArgs[0] === '-v') {
    // 패키지 버전
    var packageJson = require(path.resolve(__dirname, '../package.json'));
    console.log('version ' + packageJson.version);
} else if (userArgs[0] === '-m') {
    // 모델만 만들기
    console.log(SERVER_PATH);
    if (!fs.existsSync(SERVER_PATH)) {
        console.log('\x1b[31m# 프로젝트의 root 디렉토리 에서 실행 하시오.\x1b[0m\n');
    } else if (!fs.existsSync(MODELS_PATH)) {
        console.log('\x1b[31m# model 디렉토리가 존재하지 않습니다.\x1b[0m\n');
    } else {

        if (userArgs[1]) {

            prompt.start();
            var dbs = ['exit', 'disk', 'memory', 'mongo', 'mysql', 'postgresql', 'redis', 'sqlserver'];
            var description = '\n[Support Database]';
            for (var index in dbs) {
                description += '\n' + index + '. ' + dbs[index];
            }
            description += '\n Select Database (1-' + dbs.length + ')';

            prompt.get([{
                name: 'database',
                type: 'number',
                description: description.yellow,
                required: true,
                minimum: 0,
                maximum: dbs.length
            }], function (err, result) {
                if (err) {
                    return console.log('\x1b[31m# Select Failed \x1b[0m\n');
                }
                if (parseInt(result.database) === 0) {
                    console.log('exit');
                    return;
                }
                var selectDB = dbs[result.database];
                console.log('\x1b[32m# Select ' + selectDB + '\x1b[0m\n');

                var entity = userArgs[1];
                var capEntity = _.capitalize(userArgs[1]);

                var model = _.template(MODEL_TEMPLATE)({ 'entity': entity, 'database': selectDB });

                var modelFilePath = path.resolve(MODELS_PATH, entity + '.js');

                if (fs.existsSync(modelFilePath)) {
                    console.log('\x1b[31m# Duplicate Model \x1b[0m\n');
                } else {
                    fs.writeFile(modelFilePath, model, 'utf8', function (err) {
                        if (err) {
                            console.log('\x1b[31m# Model 파일 작성 오류 \x1b[0m\n');
                        }else {
                            // echo
                            console.log('\x1b[32m>> create ' + modelFilePath + '\x1b[0m\n');
                            console.log('\x1b[32m## node restart ##\x1b[0m\n');
                        }
                    });
                }
            });
        } else {
            console.log('\x1b[31m# 모델명을 입력하세요.\x1b[0m\n');
        }
    }
} else if (userArgs[0] === '-h' || !userArgs[0]) {
    // 도움말
    console.log('\n');
    console.log(' 사용법: samdasoo [명령어] [옵션(모델명)]');
    console.log('\n');
    console.log(' 명령어:');
    console.log('          add [옵션(모델명)] : 새 모델 추가 ex) samdasoo add users');
    console.log('          -a  [옵션(모델명)] : 새 모델 추가 ex) samdasoo -a users');
    console.log('          -m  [옵션(모델명)] : 새 모델만 추가 ex) samdasoo -m users');
    console.log('          rm [옵션(모델명)] : 모델 삭제 ex) samdasoo remove users');
    console.log('          -r  [옵션(모델명)] : 모델 삭제 ex) samdasoo -r users');
    console.log('          -v : samdasoo 버전');
    console.log('          -h : samdasoo 도움말');
    console.log('\n');
}