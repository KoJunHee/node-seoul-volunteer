'use strict';

/**
 * Created by yeobster on 15. 3. 5..
 */

var DiskAdapter = require('sails-disk'),
    MemoryAdapter = require('sails-memory'),
    MongoAdapter = require('sails-mongo'),
    MysqlAdapter = require('sails-mysql'),
    PostgresqlAdapter = require('sails-postgresql'),
    RedisAdapter = require('sails-redis'),
    SqlserverAdapter = require('sails-sqlserver'),
    Waterline = require('waterline'),
    _ = require('lodash');

/**
 * connections
 * @desc Configuration of database adapters
 * @author yeobster@gmail.com
 */

/******************************************
 *  # mysql connection
 *
 *  3. set connection with attributes
 *  adapter: 'mysql',
 *  host      : 'localhost',
 *  port      : 3306,
 *  user      : 'username',
 *  password  : 'password',
 *  database  : 'MySQL Database Name'
 *
 *  // Optional
 *  charset   : 'utf8',
 *  collation : 'utf8_swedish_ci'
 *
 *  pool: true,
 *  connectionLimit: 10,
 *  waitForConnections: true
 ******************************************/

var connections = function (config, migrate) {
    var adapterList = {
        'disk': DiskAdapter,
        'memory': MemoryAdapter,
        'mongo': MongoAdapter,
        'mysql': MysqlAdapter,
        'postgresql': PostgresqlAdapter,
        'redis': RedisAdapter,
        'sqlserver': SqlserverAdapter
    };

    var adapters = {};
    var connections = {};
    for (var db in config) {
        adapters[db] = adapterList[db];
        connections[db + 'Connection'] = {
            adapter: db,
            host: config[db].host,
            port: config[db].port,
            user: config[db].username,
            password: config[db].password,
            database: config[db].database
        };
    }

    return {
        adapters: adapters,
        connections: connections,
        defaults: {
            migrate: migrate //drop, safe, create, alter
        }
    };
};


/**
 * db connection log
 * @param connections
 */
var connectionLog = function (connections) {
    // db connection log
    for (var key in connections) {
        var connection = connections[key];
        if (connection.config) {
            var adapter = '\x1b[35m' + connection.config.adapter + '\x1b[0m';
            var server = ' \x1b[1m\x1b[33m//' + connection.config.host + ':' + connection.config.port + '/' + connection.config.database + '\x1b[0m';
            console.info('\x1b[32m>>\x1b[0m', 'DB connected ' + adapter + server);
        }
    }
};

/**
 * initialize models
 * @param modelPath
 * @returns {Array}
 */
var initModel = function (modelPath) {
    var fs = require('fs');
    var models = [];
    if (fs.existsSync(modelPath)) {
        var files = fs.readdirSync(modelPath);
        for (var i = 0; i < files.length; i++) {
            var filename = modelPath + '/' + files[i];
            models.push(require(filename));
        }
    }
    return models;
};

/**
 * samdasoo
 * @param server
 * @param options
 * @param next
 * @desc  A Hapi plugin integrating Waterline ORM
 * @author yeobster@gmail.com
 */
exports.register = function (server, options, next) {
    if (!options.config) {
        throw new Error('ERR : no database configuration');
    }
    if (!options.modelPath) {
        throw new Error('ERR : no model path');
    }

    var models = initModel(options.modelPath);

// Instantiate a new instance of the ORM
    var orm = new Waterline();

    if(models.length <= 0){
        next();
    }

// Load the Models into the ORM
    for (var i = 0; i < models.length; i++) {
        var model = models[i];
        orm.loadCollection(Waterline.Collection.extend(model));
    }

    orm.initialize(connections(options.config, options.migrate), function (err, model) {
        if (err) {
            throw err;
        }

        // Expose collections to server
        server.expose('models', model.collections);

        // Create global variable for models
        if (options.useGlobalModel) {
            for (var index in model.collections) {
                global[_.upperFirst(index)] = model.collections[index];
            }
        }

        // db connection log
        connectionLog(model.connections);

        // Allow servers to access the raw ORM!
        server.method('getWaterline', function (orm) {
            return function (cb) {
                return cb(null, orm);
            };
        }(orm));

        next();
    });
};

exports.register.attributes = {
    pkg: require('../package.json')
};